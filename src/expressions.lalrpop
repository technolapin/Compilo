use std::str::FromStr;
use crate::ast::*;

grammar;


Num: i32 = <s:r"[0-9]+"> => i32::from_str(s).unwrap();

pub Term: Terminal = {
    <n:Num> => Terminal::Int(n),
};

pub TermExpr: Box<Expression> =
{
    <t:Term> => Box::new(Expression::Terminal(t))
};


pub FactExpr: Box<Expression> =
{
	TermExpr => <>,
	Parenthesis => <>,
	MultExpr => <>,
	DivExpr => <>,
	IfExpr => <>,
}

pub NonFactExpr: Box<Expression> =
{
	MinusExpr => <>,
	AddExpr => <>,
	SubExpr => <>,
}

pub Expr: Box<Expression> =
{
	FactExpr => <>,
	NonFactExpr => <>,
}

MinusExpr: Box<Expression> =
	"-" <f: FactExpr> => Box::new(Expression::Unary(Unop::Minus, f));


Parenthesis: Box<Expression> =
	"(" <e: Expr> ")" => e;


MultExpr: Box<Expression> =
{
	<f: FactExpr> "*" <t: TermExpr> =>
	    Box::new(Expression::Binary(Binop::Mul, f, t)),
}

DivExpr: Box<Expression> =
{
	<f: FactExpr> "/" <t: TermExpr> =>
	    Box::new(Expression::Binary(Binop::Div, f, t)),
}

IfExpr: Box<Expression> =
{
	"if" <cond: Expr> "{" <e1: Expr> "}" "else" "{" <e2: Expr> "}" =>
	    Box::new(Expression::Ternary(Ternop::If, cond, e1, e2)),
}


AddExpr: Box<Expression> =
{
	<e: Expr> "+" <f: FactExpr> =>
	    Box::new(Expression::Binary(Binop::Add, e, f)),
}

SubExpr: Box<Expression> =
{
	<e: Expr> "-"  <f: FactExpr> =>
	    Box::new(Expression::Binary(Binop::Sub, e, f)),
}

